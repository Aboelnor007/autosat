// Currency game on a line with neigbourhood k = 3 (treating itself: N S N)
//
// Taken from Rupak's email:

I0 {

  init: s0;

  // at least 3 agents
  //
  s0 -> s1d G;
  s0 -> s1d S;
  s1d -> s1 delim;

  s1 -> s2d G;
  s1 -> s2d S;
  s2d -> s2 delim;

  s2 -> s3d G;
  s2 -> s3d S;
  s3d -> s3 delim;

  s3 -> s3d G;
  s3 -> s3d S;

  accepting: s3;
}

// not necessary
//closedUnderTransitions;

F {

  init: s0;

  s0 -> s1;
  s0 -> s2;

  s1 -> s1d G;
  s1d -> s1 delim;

  s2 -> s2d S;
  s2d -> s2 delim;

  accepting: s1, s2;
}

Enabled {

  init: s0;

  s0 -> s0d G;
  s0 -> s0d S;
  s0d ->  s0 enabled;

  accepting: s0;
}

P2 {

  init: s0;

  s0 -> spont_flip;
  s0 -> majority_switch;

  // copy
  spont_flip -> spont_flipd G/G;
  spont_flip -> spont_flipd S/S;
  spont_flipd -> spont_flip delim/delim;

  // self-loop
  spont_flip -> spont_flip_flippeddnow G/G;
  spont_flip -> spont_flip_flippeddnow S/S;

  spont_flip_flippeddnow -> spont_flip_flipped chosen/delim;

  spont_flip_flipped -> spont_flip_flippedd G/G;
  spont_flip_flipped -> spont_flip_flippedd S/S;
  spont_flip_flippedd -> spont_flip_flipped delim/delim;

  // Names of states are like this:
  //
  // (wrap, #G, #S, selected)
	//    - #G, #S -  number of neigbours (from the k neighbours chosen randomly)
	//      that are gold and silver respectively
	//    - "selected" - the currency of the selected agent: either X (selected
	//      agent not yet occurred), G (agent selected gold), S (agent selected
	//      silver)

	majority_switch -> no_s0_0_X;
	majority_switch -> lh_s0_0_X;
	majority_switch -> rh_s0_0_X;

  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // ===================================================================
  // NO WRAP (NOW RAP!)
  // ===================================================================
  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// initial state =====================================================
	no_s0_0_X -> no_s0_0_Xd G/G;
	no_s0_0_X -> no_s0_0_Xd S/S;
	no_s0_0_Xd -> no_s0_0_X delim/delim;
	// a G neighbour
	no_s0_0_X -> no_s1_0_Xd G/G;
	// an S neighbour
	no_s0_0_X -> no_s0_1_Xd S/S;

	// 1 gold, 0 silver, selected not yet read ===========================
	no_s1_0_Xd -> no_s1_0_X delim/delim;
	// a G neighbour
	no_s1_0_X -> no_s2_0_Gc G/G;
	// an S neighbour
	no_s1_0_X -> no_s1_1_Gc S/G;
	no_s1_0_X -> no_s1_1_Sc S/S;

	// 0 gold, 1 silver, selected not yet read ==========================
	no_s0_1_Xd -> no_s0_1_X delim/delim;
	// a G neighbour
	no_s0_1_X -> no_s1_1_Gc G/G;
	no_s0_1_X -> no_s1_1_Sc G/S;
	// an S neighbour
	no_s0_1_X -> no_s0_2_Sc S/S;

	// 2 gold, 0 silver, selected is G ==================================
	no_s2_0_Gc -> no_s2_0_G chosen/delim;
	// a G or S neighbour
	no_s2_0_G -> no_sfinald G/G;
	no_s2_0_G -> no_sfinald S/S;

	// 1 gold, 1 silver, selected is S ==================================
	no_s1_1_Sc -> no_s1_1_S chosen/delim;
	// an S neighbour
	no_s1_1_S -> no_sfinald S/S;

	// 1 gold, 1 silver, selected is G ==================================
	no_s1_1_Gc -> no_s1_1_G chosen/delim;
	// a G neighbour
	no_s1_1_G -> no_sfinald G/G;

	// 0 gold, 2 silver, selected is S ==================================
	no_s0_2_Sc -> no_s0_2_S chosen/delim;
	// a G or S neighbour
	no_s0_2_S -> no_sfinald G/G;
	no_s0_2_S -> no_sfinald S/S;

	// final state
	no_sfinal -> no_sfinald G/G;
	no_sfinal -> no_sfinald S/S;
	no_sfinald -> no_sfinal delim/delim;


  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // ===================================================================
  // Left-border
  // ===================================================================
  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// initial state =====================================================
	// a G neighbour
	lh_s0_0_X -> lh_s1_0_Gc G/G;
	lh_s0_0_X -> lh_s1_0_Sc G/S;
	// an S neighbour
	lh_s0_0_X -> lh_s0_1_Gc S/G;
	lh_s0_0_X -> lh_s0_1_Sc S/S;

	// 1 gold, 0 silver, selected is G ==================================
	lh_s1_0_Gc -> lh_s1_0_G chosen/delim;
  // a G neighbour
	lh_s1_0_G -> lh_sfinald G/G;
	// an S neighbour
	lh_s1_0_G -> lh_sfinald S/S;

	// 1 gold, 0 silver, selected is S ==================================
	lh_s1_0_Sc -> lh_s1_0_S chosen/delim;
	// an S neighbour
	lh_s1_0_S -> lh_sfinald S/S;

	// 0 gold, 1 silver, selected is G ==================================
	lh_s0_1_Gc -> lh_s0_1_G chosen/delim;
	// a G neighbour
	lh_s0_1_G -> lh_sfinald G/G;

	// 0 gold, 1 silver, selected is S ==================================
	lh_s0_1_Sc -> lh_s0_1_S chosen/delim;
  // a G neighbour
	lh_s0_1_S -> lh_sfinald G/G;
	// an S neighbour
	lh_s0_1_S -> lh_sfinald S/S;

	// final state
	lh_sfinal -> lh_sfinald G/G;
	lh_sfinal -> lh_sfinald S/S;
	lh_sfinald -> lh_sfinal delim/delim;

  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  // ===================================================================
  // Right-border
  // ===================================================================
  // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// initial state =====================================================
	rh_s0_0_X -> rh_s0_0_Xd G/G;
	rh_s0_0_X -> rh_s0_0_Xd S/S;
	rh_s0_0_Xd -> rh_s0_0_X delim/delim;
	// a G neighbour
	rh_s0_0_X -> rh_s1_0_Xd G/G;
	// an S neighbour
	rh_s0_0_X -> rh_s0_1_Xd S/S;

	// 1 gold, 0 silver, not yet selected ==================================
	rh_s1_0_Xd -> rh_s1_0_X delim/delim;
  // a G neighbour
	rh_s1_0_X -> rh_sfinalc G/G;
	// an S neighbour
	rh_s1_0_X -> rh_sfinalc S/G;
	rh_s1_0_X -> rh_sfinalc S/S;

	// 0 gold, 1 silver, not yet selected ==================================
	rh_s0_1_Xd -> rh_s0_1_X delim/delim;
  // a G neighbour
	rh_s0_1_X -> rh_sfinalc G/G;
	rh_s0_1_X -> rh_sfinalc G/S;
	// an S neighbour
	rh_s0_1_X -> rh_sfinalc S/S;

	// final state
	rh_sfinalc -> rh_sfinal chosen/delim;

  accepting: spont_flip_flipped, no_sfinal, lh_sfinal, rh_sfinal;
}

transducerStateGuessing: 1 .. 20;
automatonStateGuessing: 0 .. 3;

explicitChecksUntilLength: 12;

// noPrecomputedInvariant;
monolithicWitness;

logLevel: 1;
