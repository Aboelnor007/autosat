// Lehmann-Rabin's courteous philosophers algorithm
// 
// We follow the presentation from Gadi Taubenfeld: Synchronization Algorithms
// and Concurrent Programming, chapter 7.7.2.  A similar presentation is also
// at http://www.prismmodelchecker.org/tutorial/phil.php
//
// We use the following letters to denote the states of the local processes:
// 1. H --- hungry
// 2. Wl --- waiting for left fork
// 3. Wr --- waiting for right fork
// 4. Sl --- left fork selected, waiting for right fork
// 5. Sr --- right fork selected, waiting for left fork
// 6. E --- eat
//
// Our encoding also contains the {left,right}-last signals for every
// fork, i.e. a sub-word for a philosopher looks like this:
//
//   x_P_y
//
// where:
//        x - is the *-last signal for the fork left of the philosopher,
//            x \in {l, n, r}
//        P - is the state of the philosopher, P \in {H, Wl, Wr, Sl, Sr, E}
//        y - is the *-last signal for the fork right of the philosopher,
//            y \in {l, n, r}
//
// Note that x and y of a philosopher need to be synchronized with y and x of
// the philosopher left and right respectively.
//
// We now briefly describe the protocol below. Notice that when there are
// more than one processes with enabled actions, the choice of which process
// gets to move is nondeterministically determined by the scheduler.
//
// Each hungry philosopher tosses a coin to determine whether to wait for 
// left/right fork:
// x_H_y -> x_Wl_y
// x_H_y -> x_Wr_y
//
// When the fork is available and a neighbour is not going to eat, it can be
// picked up:
// x_H_y y_Wl_z -> x_H_y y_Sl_z
// x_Wr_y y_H_z -> x_Sr_y y_H_z
//
// When a fork is available and a neighbour is going to eat, we need to take
// into account who ate the last:
//
// x_A_y y_Wl_z -> x_A_y y_Sl_z     (A in {Wl, Wr, Sl} and y in {n, l})
// x_Wr_y y_A_z -> x_Sr_y y_A_z     (A in {Wl, Wr, Sr} and y in {n, r})
//
// If the chosen philosopher ate the last, he yields to the neighbour in a
// self-loop:
//
// x_A_r r_Wl_z -> x_A_r r_Wl_z     (A in {Wl, Wr, Sl})
// x_Wr_l l_A_z -> x_Wr_l l_A_z     (A in {Wl, Wr, Sr})
//
// When a fork has been picked up but the second one is being used by a
// neighbour, the first fork will be dropped and the philosopher may go back
// to the waiting state (and chooses between left and right again):
//
// x_Sl_y y_A_z -> x_Wl_y y_A_z     (A in {Sr, E}
// x_Sl_y y_A_z -> x_Wr_y y_A_z
// x_A_y y_Sr_z -> x_A_y y_Wl_z     (A in {Sl, E}
// x_A_y y_Sr_z -> x_A_y y_Wr_z
//
// When the second fork is available, pick it up and eat.
//
// x_Sl_y y_A_z -> x_E_y y_A_z     (A in {H, Wl, Wr, Sr})
// x_A_y y_Sr_z -> x_A_y y_E_z     (A in {H, Wl, Wr, Sl})
//
// After finished eating, a philosopher may put down both forks and set their
// *-last flag:
//
// x_A_y y_E_z z_B_w -> x_A_r r_H_l l_B_w     (A in {H, Wl, Wr, Sl}) and
//                                             B in {H, Wl, Wr, Sl})
// 
// The property to prove is that any philosopher that is hungry will eventually
// eat (freedom from individual starvation).  This is implemented by
// nondeterministically marking a hungry philosopher in the initial
// configuration and checking that he eats in the final configuration.

I0 {

  init: sinit;

//  sinit -> s0a;
//  sinit -> s0b;
//  sinit -> s0d;
//
//  // marking the first philosopher
//  s0a -> s1ad n_Hm_n;
//  s1ad -> s1a delim;
//  s1a -> s2ad n_H_n;
//  s2ad -> s2a delim;
//  s2a -> s3ad n_H_n;
//  s3ad -> s3a delim;
//  s3a -> s3ad n_H_n;
//
//  // marking the second philosopher
//  s0b -> s1bd n_H_n;
//  s1bd -> s1b delim;
//  s1b -> s2bd n_Hm_n;
//  s2bd -> s2b delim;
//  s2b -> s3bd n_H_n;
//  s3bd -> s3b delim;
//  s3b -> s3bd n_H_n;
//  
//  // marking any other philosopher
//  s0d -> s1dd n_H_n;
//  s1dd -> s1d delim;
//  s1d -> s2dd n_H_n;
//  s2dd -> s2d delim;
//  s2d -> s2dd n_H_n;
//  s2d -> s3dd n_Hm_n;
//  s3dd -> s3d delim;
//  s3d -> s3dd n_H_n;
//
// accepting: s3a, s3b, s3d;

  // first philosopher
  sinit -> sp1l N;
  sp1l -> sp1c H;
  sp1c -> sp1r N;
  sp1r -> sp1d delim;

  // second philosopher
  sp1d -> sp2l N;
  sp2l -> sp2c H;
  sp2c -> sp2r N;
  sp2r -> sp2d delim;

  // other philosophers
  sp2d -> sp3l N;
  sp3l -> sp3c H;
  sp3c -> sp3r N;
  sp3r -> sp3d delim;

  // loop
  sp3d -> sp3l N;

  accepting: sp3d;
}

closedUnderTransitions;

F {
  init: s0;

//   // H
//   s0 -> s0d n_H_n;
//   s0 -> s0d n_H_l;
//   s0 -> s0d n_H_r;
//   s0 -> s0d l_H_n;
//   s0 -> s0d l_H_l;
//   s0 -> s0d l_H_r;
//   s0 -> s0d r_H_n;
//   s0 -> s0d r_H_l;
//   s0 -> s0d r_H_r;
// 
//   // Wl
//   s0 -> s0d n_Wl_n;
//   s0 -> s0d n_Wl_l;
//   s0 -> s0d n_Wl_r;
//   s0 -> s0d l_Wl_n;
//   s0 -> s0d l_Wl_l;
//   s0 -> s0d l_Wl_r;
//   s0 -> s0d r_Wl_n;
//   s0 -> s0d r_Wl_l;
//   s0 -> s0d r_Wl_r;
// 
//   // Wr
//   s0 -> s0d n_Wr_n;
//   s0 -> s0d n_Wr_l;
//   s0 -> s0d n_Wr_r;
//   s0 -> s0d l_Wr_n;
//   s0 -> s0d l_Wr_l;
//   s0 -> s0d l_Wr_r;
//   s0 -> s0d r_Wr_n;
//   s0 -> s0d r_Wr_l;
//   s0 -> s0d r_Wr_r;
// 
//   // Sl
//   s0 -> s0d n_Sl_n;
//   s0 -> s0d n_Sl_l;
//   s0 -> s0d n_Sl_r;
//   s0 -> s0d l_Sl_n;
//   s0 -> s0d l_Sl_l;
//   s0 -> s0d l_Sl_r;
//   s0 -> s0d r_Sl_n;
//   s0 -> s0d r_Sl_l;
//   s0 -> s0d r_Sl_r;
// 
//   // Sr
//   s0 -> s0d n_Sr_n;
//   s0 -> s0d n_Sr_l;
//   s0 -> s0d n_Sr_r;
//   s0 -> s0d l_Sr_n;
//   s0 -> s0d l_Sr_l;
//   s0 -> s0d l_Sr_r;
//   s0 -> s0d r_Sr_n;
//   s0 -> s0d r_Sr_l;
//   s0 -> s0d r_Sr_r;
// 
//   // E
//   s0 -> s0d n_E_n;
//   s0 -> s0d n_E_l;
//   s0 -> s0d n_E_r;
//   s0 -> s0d l_E_n;
//   s0 -> s0d l_E_l;
//   s0 -> s0d l_E_r;
//   s0 -> s0d r_E_n;
//   s0 -> s0d r_E_l;
//   s0 -> s0d r_E_r;
// 
//   s0d -> s0 delim;
// 
//   // the marked guy
//   // Em
//   s0 -> s1d n_Em_n;
//   s0 -> s1d n_Em_l;
//   s0 -> s1d n_Em_r;
//   s0 -> s1d l_Em_n;
//   s0 -> s1d l_Em_l;
//   s0 -> s1d l_Em_r;
//   s0 -> s1d r_Em_n;
//   s0 -> s1d r_Em_l;
//   s0 -> s1d r_Em_r;
// 
//   // after the marked guy
// 
//   // H
//   s1 -> s1d n_H_n;
//   s1 -> s1d n_H_l;
//   s1 -> s1d n_H_r;
//   s1 -> s1d l_H_n;
//   s1 -> s1d l_H_l;
//   s1 -> s1d l_H_r;
//   s1 -> s1d r_H_n;
//   s1 -> s1d r_H_l;
//   s1 -> s1d r_H_r;
// 
//   // Wl
//   s1 -> s1d n_Wl_n;
//   s1 -> s1d n_Wl_l;
//   s1 -> s1d n_Wl_r;
//   s1 -> s1d l_Wl_n;
//   s1 -> s1d l_Wl_l;
//   s1 -> s1d l_Wl_r;
//   s1 -> s1d r_Wl_n;
//   s1 -> s1d r_Wl_l;
//   s1 -> s1d r_Wl_r;
// 
//   // Wr
//   s1 -> s1d n_Wr_n;
//   s1 -> s1d n_Wr_l;
//   s1 -> s1d n_Wr_r;
//   s1 -> s1d l_Wr_n;
//   s1 -> s1d l_Wr_l;
//   s1 -> s1d l_Wr_r;
//   s1 -> s1d r_Wr_n;
//   s1 -> s1d r_Wr_l;
//   s1 -> s1d r_Wr_r;
// 
//   // Sl
//   s1 -> s1d n_Sl_n;
//   s1 -> s1d n_Sl_l;
//   s1 -> s1d n_Sl_r;
//   s1 -> s1d l_Sl_n;
//   s1 -> s1d l_Sl_l;
//   s1 -> s1d l_Sl_r;
//   s1 -> s1d r_Sl_n;
//   s1 -> s1d r_Sl_l;
//   s1 -> s1d r_Sl_r;
// 
//   // Sr
//   s1 -> s1d n_Sr_n;
//   s1 -> s1d n_Sr_l;
//   s1 -> s1d n_Sr_r;
//   s1 -> s1d l_Sr_n;
//   s1 -> s1d l_Sr_l;
//   s1 -> s1d l_Sr_r;
//   s1 -> s1d r_Sr_n;
//   s1 -> s1d r_Sr_l;
//   s1 -> s1d r_Sr_r;
// 
//   // E
//   s1 -> s1d n_E_n;
//   s1 -> s1d n_E_l;
//   s1 -> s1d n_E_r;
//   s1 -> s1d l_E_n;
//   s1 -> s1d l_E_l;
//   s1 -> s1d l_E_r;
//   s1 -> s1d r_E_n;
//   s1 -> s1d r_E_l;
//   s1 -> s1d r_E_r;
// 
//   s1d -> s1 delim;
// 
//   accepting: s1;

  /////////////////////////////////
  // before
  /////////////////////////////////
  s0 -> sp1l N;
  s0 -> sp1l L;
  s0 -> sp1l R;

  sp1l -> sp1c H;
  sp1l -> sp1c Wl;
  sp1l -> sp1c Wr;
  sp1l -> sp1c Sl;
  sp1l -> sp1c Sr;
  sp1l -> sp1c E;

  // one eating
  sp1l -> sp2c E;

  sp1c -> sp1r N;
  sp1c -> sp1r L;
  sp1c -> sp1r R;

  sp1r -> s0 delim;

  /////////////////////////////////
  // after
  /////////////////////////////////
  sp2c -> sp2r N;
  sp2c -> sp2r R;
  sp2c -> sp2r L;

  sp2r -> sp2d delim;
  
  sp2d -> sp2l N;
  sp2d -> sp2l R;
  sp2d -> sp2l L;

  sp2l -> sp2c H;
  sp2l -> sp2c Wl;
  sp2l -> sp2c Wr;
  sp2l -> sp2c Sl;
  sp2l -> sp2c Sr;
  sp2l -> sp2c E;

  accepting: sp2d;
}


// THIS IS WRONG! (copied from regular dining philosophers)
Enabled {
  init: s0;

//  s0 -> s1 n_H_n;
//  s0 -> s1 n_H_l;
//  s0 -> s1 n_H_r;
//  s0 -> s1 l_H_n;
//  s0 -> s1 l_H_l;
//  s0 -> s1 l_H_r;
//  s0 -> s1 r_H_n;
//  s0 -> s1 r_H_l;
//  s0 -> s1 r_H_r;
//
//  s0 -> s1 n_Hm_n;
//  s0 -> s1 n_Hm_l;
//  s0 -> s1 n_Hm_r;
//  s0 -> s1 l_Hm_n;
//  s0 -> s1 l_Hm_l;
//  s0 -> s1 l_Hm_r;
//  s0 -> s1 r_Hm_n;
//  s0 -> s1 r_Hm_l;
//  s0 -> s1 r_Hm_r;
//
//  // Wl
//  s0 -> s1 n_Wl_n;
//  s0 -> s1 n_Wl_l;
//  s0 -> s1 n_Wl_r;
//  s0 -> s1 l_Wl_n;
//  s0 -> s1 l_Wl_l;
//  s0 -> s1 l_Wl_r;
//  s0 -> s1 r_Wl_n;
//  s0 -> s1 r_Wl_l;
//  s0 -> s1 r_Wl_r;
//
//  s0 -> s1 n_Wlm_n;
//  s0 -> s1 n_Wlm_l;
//  s0 -> s1 n_Wlm_r;
//  s0 -> s1 l_Wlm_n;
//  s0 -> s1 l_Wlm_l;
//  s0 -> s1 l_Wlm_r;
//  s0 -> s1 r_Wlm_n;
//  s0 -> s1 r_Wlm_l;
//  s0 -> s1 r_Wlm_r;
//
//  // Wr
//  s0 -> s1 n_Wr_n;
//  s0 -> s1 n_Wr_l;
//  s0 -> s1 n_Wr_r;
//  s0 -> s1 l_Wr_n;
//  s0 -> s1 l_Wr_l;
//  s0 -> s1 l_Wr_r;
//  s0 -> s1 r_Wr_n;
//  s0 -> s1 r_Wr_l;
//  s0 -> s1 r_Wr_r;
//
//  s0 -> s1 n_Wrm_n;
//  s0 -> s1 n_Wrm_l;
//  s0 -> s1 n_Wrm_r;
//  s0 -> s1 l_Wrm_n;
//  s0 -> s1 l_Wrm_l;
//  s0 -> s1 l_Wrm_r;
//  s0 -> s1 r_Wrm_n;
//  s0 -> s1 r_Wrm_l;
//  s0 -> s1 r_Wrm_r;
//
//  // Sl
//  s0 -> s1 n_Sl_n;
//  s0 -> s1 n_Sl_l;
//  s0 -> s1 n_Sl_r;
//  s0 -> s1 l_Sl_n;
//  s0 -> s1 l_Sl_l;
//  s0 -> s1 l_Sl_r;
//  s0 -> s1 r_Sl_n;
//  s0 -> s1 r_Sl_l;
//  s0 -> s1 r_Sl_r;
//
//  s0 -> s1 n_Slm_n;
//  s0 -> s1 n_Slm_l;
//  s0 -> s1 n_Slm_r;
//  s0 -> s1 l_Slm_n;
//  s0 -> s1 l_Slm_l;
//  s0 -> s1 l_Slm_r;
//  s0 -> s1 r_Slm_n;
//  s0 -> s1 r_Slm_l;
//  s0 -> s1 r_Slm_r;
//
//  // Sr
//  s0 -> s1 n_Sr_n;
//  s0 -> s1 n_Sr_l;
//  s0 -> s1 n_Sr_r;
//  s0 -> s1 l_Sr_n;
//  s0 -> s1 l_Sr_l;
//  s0 -> s1 l_Sr_r;
//  s0 -> s1 r_Sr_n;
//  s0 -> s1 r_Sr_l;
//  s0 -> s1 r_Sr_r;
//
//  s0 -> s1 n_Srm_n;
//  s0 -> s1 n_Srm_l;
//  s0 -> s1 n_Srm_r;
//  s0 -> s1 l_Srm_n;
//  s0 -> s1 l_Srm_l;
//  s0 -> s1 l_Srm_r;
//  s0 -> s1 r_Srm_n;
//  s0 -> s1 r_Srm_l;
//  s0 -> s1 r_Srm_r;
//
//  // E
//  s0 -> s1 n_E_n;
//  s0 -> s1 n_E_l;
//  s0 -> s1 n_E_r;
//  s0 -> s1 l_E_n;
//  s0 -> s1 l_E_l;
//  s0 -> s1 l_E_r;
//  s0 -> s1 r_E_n;
//  s0 -> s1 r_E_l;
//  s0 -> s1 r_E_r;
//
//  s0 -> s1 n_Em_n;
//  s0 -> s1 n_Em_l;
//  s0 -> s1 n_Em_r;
//  s0 -> s1 l_Em_n;
//  s0 -> s1 l_Em_l;
//  s0 -> s1 l_Em_r;
//  s0 -> s1 r_Em_n;
//  s0 -> s1 r_Em_l;
//  s0 -> s1 r_Em_r;
//
//  s1 -> s0 enabled;
//
//  accepting: s0;

  s0 -> sp1l N;
  s0 -> sp1l L;
  s0 -> sp1l R;

  sp1l -> sp1c H;
  sp1l -> sp1c Wl;
  sp1l -> sp1c Wr;
  sp1l -> sp1c Sl;
  sp1l -> sp1c Sr;
  sp1l -> sp1c E;

  sp1c -> sp1r N;
  sp1c -> sp1r L;
  sp1c -> sp1r R;

  sp1r -> s0 enabled;

  accepting: s0;
}


// THIS IS WRONG! (copied from regular dining philosophers)
P2 {

  init: s0;

  /////////////////////////////////////////////////////
  // self loop
  /////////////////////////////////////////////////////
  s0 -> ssl1;

  ssl1 -> ssl1 N/N;
  ssl1 -> ssl1 L/L;
  ssl1 -> ssl1 R/R;
  ssl1 -> ssl1 H/H;
  ssl1 -> ssl1 Wl/Wl;
  ssl1 -> ssl1 Wr/Wr;
  ssl1 -> ssl1 Sl/Sl;
  ssl1 -> ssl1 Sr/Sr;
  ssl1 -> ssl1 E/E;
  ssl1 -> ssl1 delim/delim;

  ssl1 -> sfinalcopy chosen/delim;

  sfinalcopy -> sfinalcopy N/N;
  sfinalcopy -> sfinalcopy L/L;
  sfinalcopy -> sfinalcopy R/R;
  sfinalcopy -> sfinalcopy H/H;
  sfinalcopy -> sfinalcopy Wl/Wl;
  sfinalcopy -> sfinalcopy Wr/Wr;
  sfinalcopy -> sfinalcopy Sl/Sl;
  sfinalcopy -> sfinalcopy Sr/Sr;
  sfinalcopy -> sfinalcopy E/E;
  sfinalcopy -> sfinalcopy delim/delim;



  /////////////////////////////////////////////////////
  // get hungry
  /////////////////////////////////////////////////////
  s0 -> sgh1;

  sgh1 -> sgh1 N/N;
  sgh1 -> sgh1 L/L;
  sgh1 -> sgh1 R/R;
  sgh1 -> sgh1 H/H;
  sgh1 -> sgh1 Wl/Wl;
  sgh1 -> sgh1 Wr/Wr;
  sgh1 -> sgh1 Sl/Sl;
  sgh1 -> sgh1 Sr/Sr;
  sgh1 -> sgh1 E/E;
  sgh1 -> sgh1 delim/delim;

  sgh1 -> sgh2 H/Wl;
  sgh1 -> sgh2 H/Wr;

  sgh2 -> sgh3 N/N;
  sgh2 -> sgh3 L/L;
  sgh2 -> sgh3 R/R;

  sgh3 -> sfinalcopy chosen/delim;


  accepting: sfinalcopy;

}

transducerStateGuessing: 1 .. 3;
automatonStateGuessing: 1 .. 5;

// symmetries: rotation;

monolithicWitness;

logLevel: 1;
parallel: 1;

explicitChecksUntilLength: 30;
