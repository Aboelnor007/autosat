//
// Model of Moran processes, with three alleles A, B, C, with fairness.
//

// initial: words of length >= 1
I0 {
  init: s0;

  s0 -> s1p A;
  s0 -> s1p B;

  s1p -> s1 delim;

  s1 -> s1p A;
  s1 -> s1p B;

  accepting: s1;
}

closedUnderTransitions;

// final: configurations with only A, B alleles
F {
  init: s0;

  s0 -> sap A;
  sa -> sap A;

  sap -> sa delim;

  s0 -> sbp B;
  sb -> sbp B;

  sbp -> sb delim;

  accepting: sa, sb;
}

// everything is enabled
Enabled {
  init: s0;

  s0 -> s1p A;
  s0 -> s1p B;

  s1p -> s1 enabled;

  s1 -> s1p A;
  s1 -> s1p B;

  accepting: s1;
}

// Process: copy type to one of the neighbours
P2 {
  init: s0;

  s0 -> s0p A/A;
  s0 -> s0p B/B;

  s0p -> s0 delim/delim;

  // copy left
  s0 -> s1ap A/A;
  s0 -> s1ap B/A;

  s0 -> s1bp A/B;
  s0 -> s1bp B/B;

  s1ap -> s1a delim/delim;
  s1bp -> s1b delim/delim;

  s1a -> s10p A/A;  
  s1b -> s10p B/B;

  s10p -> sf chosen/delim;

  // copy right
  s0 -> s2ap A/A;  
  s0 -> s2bp B/B;

  s2ap -> s2a chosen/delim;
  s2bp -> s2b chosen/delim;

  s2a -> sfp A/A;
  s2a -> sfp B/A;

  s2b -> sfp A/B;
  s2b -> sfp B/B;

  // self loop
  s0 -> s5p A/A;
  s0 -> s5p B/B;
  
  s5p -> sf chosen/delim;

  sf -> sfp A/A;
  sf -> sfp B/B;

  sfp -> sf delim/delim;

  accepting: sf;
}

transducerStateGuessing: 1 .. 3;
automatonStateGuessing: 0 .. 10;

//monolithicWitness;

noPrecomputedInvariant;
//useRankingFunctions;
logLevel: 1;

explicitChecksUntilLength: 15;
