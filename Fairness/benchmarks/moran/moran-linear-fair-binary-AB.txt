/**
 * Model of Moran processes, with two alleles A, B
 */

// initial: words of length >= 1
I0 {
  init: s0;

  s0 -> s1p A;
  s0 -> s1p B;

  // counter in binary, containing at least one 0
  s1p -> s1p 1;
  s1p -> s1pp 0;
  s1pp -> s1pp 1;
  s1pp -> s1pp 0;
  s1pp -> s1;

  s1 -> s1p A;
  s1 -> s1p B;

  accepting: s1;
}

closedUnderTransitions;

// final: configurations with only A, B alleles,
// or with one counter being 0*
F {
  init: s0;

  s0 -> s1;
  s0 -> s2;
  s0 -> s3;

  // only A
  s1 -> sa A;
  sa -> sa A;
  sa -> sa 0;
  sa -> sa 1;

  // only B
  s2 -> sb B;
  sb -> sb B;
  sb -> sb 0;
  sb -> sb 1;

  // one counter 0
  s3 -> s3 A;
  s3 -> s3 B;
  s3 -> s3 0;
  s3 -> s3 1;

  s3 -> s5 A;
  s3 -> s5 B;

  s5 -> s5 0;

  s5 -> s6 A;
  s5 -> s6 B;

  s6 -> s6 A;
  s6 -> s6 B;
  s6 -> s6 0;
  s6 -> s6 1;

  accepting: sa, sb, s5, s6;
}

// Scheduler: non-deterministically select one letter, by setting
// its counter to 1*; decrement all other counters by 1
P1 {
  init: s0;

  s0 -> s1;
  s0 -> s9;

  // decrement counter (which initially must not be 1*)
  s1 -> s2 A/A;
  s1 -> s2 B/B;
  
  s2 -> s3;
  s2 -> s5;

  s3 -> s3 1/1;
  s3 -> s4 1/0;
  s4 -> s8 0/1;

  s5 -> s5 1/1;
  s5 -> s6 0/0;

  s6 -> s6 0/0;
  s6 -> s6 1/1;

  s6 -> s8 1/0;

  s8 -> s8 0/1;

  s8 -> s0;

  // set counter to 1 (which initially must not be 1*)
  s9 -> s10 A/A;
  s9 -> s10 B/B;

  s10 -> s10 1/1;
  s10 -> s10b 0/1;  

  s10b -> s10b 0/1;
  s10b -> s10b 1/1;

  s10b -> s11;

  // decrement counter (which initially must not be 1*)
  s11 -> s12 A/A;
  s11 -> s12 B/B;

  s12 -> s13;
  s12 -> s15;

  s13 -> s13 0/0;
  s13 -> s13 1/1;

  s13 -> s14 1/0;
  s14 -> s18 0/1;

  s15 -> s15 1/1;
  s15 -> s16 0/0;

  s16 -> s16 0/0;
  s16 -> s16 1/1;

  s16 -> s18 1/0;

  s18 -> s18 0/1;

  s18 -> s11;

  accepting: s11, s18;
}

// Process: copy type to one of the neighbours
P2 {
  init: s0;

  s0 -> s0 A/A;
  s0 -> s0 B/B;
  s0 -> s0 0/0;
  s0 -> s0 1/1;

  // copy left
  s0 -> s1a A/A;
  s0 -> s1a B/A;
  s1a -> s1a 0/0;
  s1a -> s1a 1/1;

  s0 -> s1b A/B;
  s0 -> s1b B/B;
  s1b -> s1b 0/0;
  s1b -> s1b 1/1;

  s1a -> s10 A/A;
  s1b -> s10 B/B;

  s10 -> s10 1/1;

  // decrement counter
  s10 -> s11 1/0;

  s11 -> s12 A/A;
  s11 -> s12 B/B;

  // copy right
  s0 -> s2a A/A;
  s0 -> s2b B/B;

  s2a -> s2a 1/1;
  s2b -> s2b 1/1;

  // decrement counter
  s2a -> s3a 1/0;
  s2b -> s3b 1/0;

  s3a -> s12 A/A;
  s3a -> s12 B/A;

  s3b -> s12 A/B;
  s3b -> s12 B/B;

  // suffix
  s12 -> s12 A/A;
  s12 -> s12 B/B;
  s12 -> s12 0/0;
  s12 -> s12 1/1;

  accepting: s11, s12;
}

transducerStateGuessing: 1 .. 3;
automatonStateGuessing: 0 .. 10;

//monolithicWitness;
//useRankingFunctions;

logLevel: 1;

explicitChecksUntilLength: 6;
