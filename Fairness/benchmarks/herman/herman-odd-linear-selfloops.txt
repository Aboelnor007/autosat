// Herman's protocol with an odd number of tokens on a line with enabledness and self-loops
//
// This an adaptation of Herman's protocol in a ring.  This version uses a
// delimiter to distinguish sub-words of individual processes, and the Enabled
// automaton to denote enabled transitions.
//
// Liveness holds under (weakly) fair schedulers.
//
// N - no token
// T - token
// delim - delimiter
// chosen - process chosen by scheduler
//

// Configurations with at an odd number of tokens
I0 {
    init: s0;

    s0 -> s0p N;
    s0p -> s0 delim;

    s0 -> s1p T;
    s1p -> s1 delim;

    s1 -> s1p N;
    s1 -> s2p T;

    s2p -> s2 delim;

    s2 -> s2p N;
    s2 -> s1p T;

    accepting: s1;
}

closedUnderTransitions;

// Configurations with precisely one token
F {
    init: s0;

    s0 -> s0p N;
    s0p -> s0 delim;

    s0 -> s1p T;
    s1p -> s1 delim;

    s1 -> s1p N;
    s1p -> s1 delim;

    accepting: s1;
}

Enabled {
    init: s0;

    s0 -> sNT N;
    s0 -> sNT T;
    sNT -> s0 enabled;

    accepting: s0;
}

P2 {
    init: sinit;

    // normal passing
    sinit -> s0;

    s0 -> s0p N/N;
    s0 -> s0p T/T;
    s0p -> s0 delim/delim;

    // keep
    s0 -> s1pc T/T;
    // self-loop
    s0 -> s1pc N/N;
    s1pc -> s1 chosen/delim;
    // pass to right
    s0 -> s2pc T/N;
    s2pc -> s2 chosen/delim;

    // Merge tokens
    s2 -> s1p T/N;
    // Pass token to right from s2
    s2 -> s1p N/T;
    s1p -> s1 delim/delim;

    s1 -> s1p N/N;
    s1 -> s1p T/T;

    accepting: s1;
}

transducerStateGuessing: 1 .. 3;
automatonStateGuessing: 0 .. 4;

// monolithicWitness;
useRankingFunctions;
noPrecomputedInvariant;

explicitChecksUntilLength: 15;

logLevel: 1;
parallel: 1;
