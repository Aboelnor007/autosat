
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu May 14 13:18:31 SGT 2015
//----------------------------------------------------

package grammar;


/** CUP v0.10k generated parser.
  * @version Thu May 14 13:18:31 SGT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\003\007\000\002\004" +
    "\010\000\002\005\006\000\002\006\010\000\002\006\005" +
    "\000\002\006\005\000\002\007\006\000\002\010\010\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\007\000\002\010\010\000\002\010\006\000\002\011" +
    "\007\000\002\012\007\000\002\013\005\000\002\014\007" +
    "\000\002\015\006\000\002\016\006\000\002\016\005\000" +
    "\002\017\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\003" +
    "\000\002\022\003\000\002\023\003\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\002\000\002" +
    "\026\004\000\002\027\002\000\002\027\003\000\002\027" +
    "\005\000\002\030\002\000\002\030\003\000\002\030\005" +
    "\000\002\031\002\000\002\031\003\000\002\031\005\000" +
    "\002\032\002\000\002\032\004\000\002\033\002\000\002" +
    "\033\003\000\002\033\005\000\002\034\002\000\002\034" +
    "\003\000\002\034\005\000\002\035\002\000\002\035\003" +
    "\000\002\035\005\000\002\036\002\000\002\036\004\000" +
    "\002\037\002\000\002\037\003\000\002\037\005\000\002" +
    "\040\002\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\041\011\001\002\000\022\005\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\032\uffdc\033\uffdc\040\uffdc\042\uffdc\001\002" +
    "\000\004\004\012\001\002\000\004\024\014\001\002\000" +
    "\012\016\uffd7\030\023\043\020\044\017\001\002\000\004" +
    "\006\015\001\002\000\006\043\020\044\017\001\002\000" +
    "\004\007\021\001\002\000\022\007\uffdd\010\uffdd\011\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\043\uffdd\044\uffdd\001\002\000" +
    "\022\007\uffde\010\uffde\011\uffde\014\uffde\015\uffde\016\uffde" +
    "\043\uffde\044\uffde\001\002\000\012\016\ufffe\030\ufffe\043" +
    "\ufffe\044\ufffe\001\002\000\004\010\043\001\002\000\004" +
    "\006\041\001\002\000\006\007\037\016\uffd6\001\002\000" +
    "\004\016\026\001\002\000\004\006\031\001\002\000\004" +
    "\005\030\001\002\000\022\005\uffff\021\uffff\022\uffff\023" +
    "\uffff\032\uffff\033\uffff\040\uffff\042\uffff\001\002\000\010" +
    "\007\uffc4\043\020\044\017\001\002\000\010\007\uffc3\014" +
    "\035\016\uffc3\001\002\000\004\007\034\001\002\000\004" +
    "\005\ufffa\001\002\000\012\007\uffc4\016\uffc4\043\020\044" +
    "\017\001\002\000\006\007\uffc2\016\uffc2\001\002\000\012" +
    "\016\uffd7\030\023\043\020\044\017\001\002\000\004\016" +
    "\uffd5\001\002\000\012\007\uffc4\016\uffc4\043\020\044\017" +
    "\001\002\000\006\007\ufffb\016\ufffb\001\002\000\006\043" +
    "\020\044\017\001\002\000\012\007\ufffc\016\ufffc\043\020" +
    "\044\017\001\002\000\004\011\046\001\002\000\006\043" +
    "\020\044\017\001\002\000\006\007\ufffd\016\ufffd\001\002" +
    "\000\022\005\054\021\061\022\060\023\056\032\055\033" +
    "\053\040\051\042\052\001\002\000\004\006\203\001\002" +
    "\000\004\004\157\001\002\000\004\006\154\001\002\000" +
    "\004\002\000\001\002\000\004\006\136\001\002\000\004" +
    "\035\122\001\002\000\022\005\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\032\uffdb\033\uffdb\040\uffdb\042\uffdb\001\002\000\004" +
    "\006\104\001\002\000\004\006\062\001\002\000\006\007" +
    "\uffd4\013\065\001\002\000\006\007\uffd3\014\102\001\002" +
    "\000\004\007\101\001\002\000\004\043\066\001\002\000" +
    "\004\014\067\001\002\000\006\013\uffd1\015\uffd1\001\002" +
    "\000\006\013\073\015\072\001\002\000\006\013\uffd0\015" +
    "\uffd0\001\002\000\006\007\ufff1\014\ufff1\001\002\000\006" +
    "\015\uffc6\043\uffc6\001\002\000\004\015\100\001\002\000" +
    "\006\015\uffe2\043\076\001\002\000\006\015\uffe1\043\uffe1" +
    "\001\002\000\006\015\uffc5\043\uffc5\001\002\000\006\013" +
    "\ufff0\015\ufff0\001\002\000\022\005\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\032\ufff7\033\ufff7\040\ufff7\042\ufff7\001\002\000" +
    "\006\007\uffd4\013\065\001\002\000\004\007\uffd2\001\002" +
    "\000\006\007\uffda\013\107\001\002\000\004\007\121\001" +
    "\002\000\006\007\uffd9\014\117\001\002\000\010\014\uffc1" +
    "\043\uffc1\044\uffc1\001\002\000\004\014\114\001\002\000" +
    "\012\014\uffe0\015\uffe0\043\020\044\017\001\002\000\012" +
    "\014\uffdf\015\uffdf\043\uffdf\044\uffdf\001\002\000\012\014" +
    "\uffc0\015\uffc0\043\uffc0\044\uffc0\001\002\000\010\015\uffc1" +
    "\043\uffc1\044\uffc1\001\002\000\004\015\116\001\002\000" +
    "\006\007\ufff2\014\ufff2\001\002\000\006\007\uffda\013\107" +
    "\001\002\000\004\007\uffd8\001\002\000\022\005\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\032\ufff8\033\ufff8\040\ufff8\042\ufff8" +
    "\001\002\000\004\006\123\001\002\000\006\007\uffcf\013" +
    "\126\001\002\000\006\007\uffce\014\134\001\002\000\004" +
    "\007\133\001\002\000\006\043\020\044\017\001\002\000" +
    "\004\014\130\001\002\000\006\043\020\044\017\001\002" +
    "\000\004\015\132\001\002\000\006\007\uffef\014\uffef\001" +
    "\002\000\022\005\ufff5\021\ufff5\022\ufff5\023\ufff5\032\ufff5" +
    "\033\ufff5\040\ufff5\042\ufff5\001\002\000\006\007\uffcf\013" +
    "\126\001\002\000\004\007\uffcd\001\002\000\024\007\uffc9" +
    "\017\147\020\146\025\144\026\143\027\142\034\141\036" +
    "\140\037\137\001\002\000\006\007\uffe8\014\uffe8\001\002" +
    "\000\006\007\uffea\014\uffea\001\002\000\006\007\uffe4\014" +
    "\uffe4\001\002\000\006\007\uffe3\014\uffe3\001\002\000\006" +
    "\007\uffe7\014\uffe7\001\002\000\006\007\uffe6\014\uffe6\001" +
    "\002\000\004\007\153\001\002\000\006\007\uffe5\014\uffe5" +
    "\001\002\000\006\007\uffe9\014\uffe9\001\002\000\006\007" +
    "\uffc8\014\151\001\002\000\024\007\uffc9\017\147\020\146" +
    "\025\144\026\143\027\142\034\141\036\140\037\137\001" +
    "\002\000\004\007\uffc7\001\002\000\022\005\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\032\ufff3\033\ufff3\040\ufff3\042\ufff3\001" +
    "\002\000\010\007\uffc4\043\020\044\017\001\002\000\004" +
    "\007\156\001\002\000\022\005\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\032\ufff6\033\ufff6\040\ufff6\042\ufff6\001\002\000\004" +
    "\024\160\001\002\000\004\006\200\001\002\000\010\016" +
    "\uffcc\043\020\044\017\001\002\000\004\010\175\001\002" +
    "\000\006\007\173\016\uffcb\001\002\000\004\016\165\001" +
    "\002\000\004\006\170\001\002\000\004\005\167\001\002" +
    "\000\022\005\ufff4\021\ufff4\022\ufff4\023\ufff4\032\ufff4\033" +
    "\ufff4\040\ufff4\042\ufff4\001\002\000\010\007\uffc4\043\020" +
    "\044\017\001\002\000\004\007\172\001\002\000\004\005" +
    "\uffeb\001\002\000\010\016\uffcc\043\020\044\017\001\002" +
    "\000\004\016\uffca\001\002\000\006\043\020\044\017\001" +
    "\002\000\012\007\uffec\016\uffec\043\020\044\017\001\002" +
    "\000\006\007\uffed\016\uffed\001\002\000\006\043\020\044" +
    "\017\001\002\000\004\007\202\001\002\000\010\016\uffee" +
    "\043\uffee\044\uffee\001\002\000\004\043\204\001\002\000" +
    "\004\012\205\001\002\000\004\043\206\001\002\000\004" +
    "\007\207\001\002\000\022\005\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\032\ufff9\033\ufff9\040\ufff9\042\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\004\026\047\001\001\000\002\001\001\000\004\005" +
    "\012\001\001\000\010\006\023\025\021\030\024\001\001" +
    "\000\002\001\001\000\004\025\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\031\037\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\031\037\035\001\001\000\002\001\001\000\010\006" +
    "\023\025\021\030\037\001\001\000\002\001\001\000\006" +
    "\025\031\037\041\001\001\000\002\001\001\000\004\025" +
    "\043\001\001\000\004\025\044\001\001\000\002\001\001" +
    "\000\004\025\046\001\001\000\002\001\001\000\004\010" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\062\031\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\067\001\001\000\004\013\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\073\036\074\001\001" +
    "\000\002\001\001\000\004\022\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\062\031\102\001\001\000\002\001\001\000" +
    "\006\011\105\027\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\107\040\110\001\001\000\002\001" +
    "\001\000\006\024\112\025\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\114\040\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\105\027\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\123\033\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\126\001\001\000\002\001" +
    "\001\000\004\025\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\123\033\134\001" +
    "\001\000\002\001\001\000\006\020\147\035\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\147\035\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\031\037\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\160\001\001" +
    "\000\002\001\001\000\010\016\162\025\161\034\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\031\037\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\162\025\161\034\173\001" +
    "\001\000\002\001\001\000\004\025\175\001\001\000\004" +
    "\025\176\001\001\000\002\001\001\000\004\025\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public grammar.Absyn.ModelRule pModelRule() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.ModelRule) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListNameSpaceRule ::= ListNameSpaceRule NameSpaceRule 
            {
              grammar.Absyn.ListNameSpaceRule RESULT = null;
		grammar.Absyn.ListNameSpaceRule p_1 = (grammar.Absyn.ListNameSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.NameSpaceRule p_2 = (grammar.Absyn.NameSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListNameSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListNameSpaceRule ::= 
            {
              grammar.Absyn.ListNameSpaceRule RESULT = null;
		 RESULT = new grammar.Absyn.ListNameSpaceRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListNameSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListName ::= Name _SYMB_8 ListName 
            {
              grammar.Absyn.ListName RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListName ::= Name 
            {
              grammar.Absyn.ListName RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListName ::= 
            {
              grammar.Absyn.ListName RESULT = null;
		 RESULT = new grammar.Absyn.ListName(); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListNumberSpaceRule ::= ListNumberSpaceRule NumberSpaceRule 
            {
              grammar.Absyn.ListNumberSpaceRule RESULT = null;
		grammar.Absyn.ListNumberSpaceRule p_1 = (grammar.Absyn.ListNumberSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.NumberSpaceRule p_2 = (grammar.Absyn.NumberSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ListNumberSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListNumberSpaceRule ::= 
            {
              grammar.Absyn.ListNumberSpaceRule RESULT = null;
		 RESULT = new grammar.Absyn.ListNumberSpaceRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ListNumberSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListCheckingConditionRule ::= CheckingConditionRule _SYMB_8 ListCheckingConditionRule 
            {
              grammar.Absyn.ListCheckingConditionRule RESULT = null;
		grammar.Absyn.CheckingConditionRule p_1 = (grammar.Absyn.CheckingConditionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListCheckingConditionRule p_3 = (grammar.Absyn.ListCheckingConditionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListCheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListCheckingConditionRule ::= CheckingConditionRule 
            {
              grammar.Absyn.ListCheckingConditionRule RESULT = null;
		grammar.Absyn.CheckingConditionRule p_1 = (grammar.Absyn.CheckingConditionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListCheckingConditionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListCheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListCheckingConditionRule ::= 
            {
              grammar.Absyn.ListCheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.ListCheckingConditionRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListCheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListAutomataTransitionRule ::= AutomataTransitionRule _SYMB_3 ListAutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListAutomataTransitionRule p_3 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListAutomataTransitionRule ::= AutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListAutomataTransitionRule ::= 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListImpossiblePairRule ::= ImpossiblePairRule _SYMB_8 ListImpossiblePairRule 
            {
              grammar.Absyn.ListImpossiblePairRule RESULT = null;
		grammar.Absyn.ImpossiblePairRule p_1 = (grammar.Absyn.ImpossiblePairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListImpossiblePairRule p_3 = (grammar.Absyn.ListImpossiblePairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListImpossiblePairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListImpossiblePairRule ::= ImpossiblePairRule 
            {
              grammar.Absyn.ListImpossiblePairRule RESULT = null;
		grammar.Absyn.ImpossiblePairRule p_1 = (grammar.Absyn.ImpossiblePairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListImpossiblePairRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListImpossiblePairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListImpossiblePairRule ::= 
            {
              grammar.Absyn.ListImpossiblePairRule RESULT = null;
		 RESULT = new grammar.Absyn.ListImpossiblePairRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ListImpossiblePairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListGeneratorRule ::= ListGeneratorRule GeneratorRule 
            {
              grammar.Absyn.ListGeneratorRule RESULT = null;
		grammar.Absyn.ListGeneratorRule p_1 = (grammar.Absyn.ListGeneratorRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.GeneratorRule p_2 = (grammar.Absyn.GeneratorRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListGeneratorRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListGeneratorRule ::= 
            {
              grammar.Absyn.ListGeneratorRule RESULT = null;
		 RESULT = new grammar.Absyn.ListGeneratorRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListGeneratorRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListSymInstance ::= SymInstance _SYMB_8 ListSymInstance 
            {
              grammar.Absyn.ListSymInstance RESULT = null;
		grammar.Absyn.SymInstance p_1 = (grammar.Absyn.SymInstance)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListSymInstance p_3 = (grammar.Absyn.ListSymInstance)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ListSymInstance*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListSymInstance ::= SymInstance 
            {
              grammar.Absyn.ListSymInstance RESULT = null;
		grammar.Absyn.SymInstance p_1 = (grammar.Absyn.SymInstance)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListSymInstance(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ListSymInstance*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListSymInstance ::= 
            {
              grammar.Absyn.ListSymInstance RESULT = null;
		 RESULT = new grammar.Absyn.ListSymInstance(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ListSymInstance*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListTransitionRule ::= TransitionRule _SYMB_3 ListTransitionRule 
            {
              grammar.Absyn.ListTransitionRule RESULT = null;
		grammar.Absyn.TransitionRule p_1 = (grammar.Absyn.TransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListTransitionRule p_3 = (grammar.Absyn.ListTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ListTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListTransitionRule ::= TransitionRule 
            {
              grammar.Absyn.ListTransitionRule RESULT = null;
		grammar.Absyn.TransitionRule p_1 = (grammar.Absyn.TransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListTransitionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ListTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListTransitionRule ::= 
            {
              grammar.Absyn.ListTransitionRule RESULT = null;
		 RESULT = new grammar.Absyn.ListTransitionRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ListTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListSymmetryPairRule ::= SymmetryPairRule _SYMB_8 ListSymmetryPairRule 
            {
              grammar.Absyn.ListSymmetryPairRule RESULT = null;
		grammar.Absyn.SymmetryPairRule p_1 = (grammar.Absyn.SymmetryPairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListSymmetryPairRule p_3 = (grammar.Absyn.ListSymmetryPairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListSymmetryPairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ListSymmetryPairRule ::= SymmetryPairRule 
            {
              grammar.Absyn.ListSymmetryPairRule RESULT = null;
		grammar.Absyn.SymmetryPairRule p_1 = (grammar.Absyn.SymmetryPairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListSymmetryPairRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListSymmetryPairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListSymmetryPairRule ::= 
            {
              grammar.Absyn.ListSymmetryPairRule RESULT = null;
		 RESULT = new grammar.Absyn.ListSymmetryPairRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListSymmetryPairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListStatement ::= ListStatement Statement 
            {
              grammar.Absyn.ListStatement RESULT = null;
		grammar.Absyn.ListStatement p_1 = (grammar.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Statement p_2 = (grammar.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListStatement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListStatement ::= 
            {
              grammar.Absyn.ListStatement RESULT = null;
		 RESULT = new grammar.Absyn.ListStatement(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListStatement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Name ::= _IDENT_ 
            {
              grammar.Absyn.Name RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.LiteralName(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Name*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Name ::= _INTEGER_ 
            {
              grammar.Absyn.Name RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NumberName(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Name*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NameSpaceRule ::= Name 
            {
              grammar.Absyn.NameSpaceRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NameSpace(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NameSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NameSequenceRule ::= ListNameSpaceRule 
            {
              grammar.Absyn.NameSequenceRule RESULT = null;
		grammar.Absyn.ListNameSpaceRule p_1 = (grammar.Absyn.ListNameSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NameSequence(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*NameSequenceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NumberSpaceRule ::= _INTEGER_ 
            {
              grammar.Absyn.NumberSpaceRule RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NumberSpace(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NumberSpaceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IndexSequenceRule ::= ListNumberSpaceRule 
            {
              grammar.Absyn.IndexSequenceRule RESULT = null;
		grammar.Absyn.ListNumberSpaceRule p_1 = (grammar.Absyn.ListNumberSpaceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.IndexSequence(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*IndexSequenceRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CheckingConditionRule ::= _SYMB_19 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.InputUniversalCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CheckingConditionRule ::= _SYMB_24 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.OutputUniversalCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CheckingConditionRule ::= _SYMB_12 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.CopycatCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CheckingConditionRule ::= _SYMB_17 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.InjectiveInputCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CheckingConditionRule ::= _SYMB_18 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.InjectiveOutputCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CheckingConditionRule ::= _SYMB_27 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.PermutativeCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CheckingConditionRule ::= _SYMB_11 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.AutomorphismCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CheckingConditionRule ::= _SYMB_26 
            {
              grammar.Absyn.CheckingConditionRule RESULT = null;
		 RESULT = new grammar.Absyn.ParikhCondition(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CheckingConditionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AutomataAcceptingsRule ::= _SYMB_10 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.AutomataAcceptingsRule RESULT = null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataAcceptings(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*AutomataAcceptingsRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AutomataTransitionRule ::= Name _SYMB_4 Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.AutomataEmptyTransition(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*AutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AutomataTransitionRule ::= Name _SYMB_4 Name Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.Name p_4 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.AutomataTransition(p_1,p_3,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*AutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AutomataInitRule ::= _SYMB_16 _SYMB_2 Name _SYMB_3 
            {
              grammar.Absyn.AutomataInitRule RESULT = null;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataInitialState(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*AutomataInitRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ImpossiblePairRule ::= _SYMB_7 Name _SYMB_8 Name _SYMB_9 
            {
              grammar.Absyn.ImpossiblePairRule RESULT = null;
		grammar.Absyn.Name p_2 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Name p_4 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.ImpossiblePair(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ImpossiblePairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GeneratorRule ::= _SYMB_7 IndexSequenceRule _SYMB_9 
            {
              grammar.Absyn.GeneratorRule RESULT = null;
		grammar.Absyn.IndexSequenceRule p_2 = (grammar.Absyn.IndexSequenceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Generator(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*GeneratorRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SymInstance ::= _SYMB_7 _INTEGER_ _SYMB_8 ListGeneratorRule _SYMB_9 
            {
              grammar.Absyn.SymInstance RESULT = null;
		Integer p_2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListGeneratorRule p_4 = (grammar.Absyn.ListGeneratorRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.SymmetryInstance(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*SymInstance*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SymmetryPairRule ::= _SYMB_7 NameSequenceRule _SYMB_8 NameSequenceRule _SYMB_9 
            {
              grammar.Absyn.SymmetryPairRule RESULT = null;
		grammar.Absyn.NameSequenceRule p_2 = (grammar.Absyn.NameSequenceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.NameSequenceRule p_4 = (grammar.Absyn.NameSequenceRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.SymmetryPair(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*SymmetryPairRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= _SYMB_22 _SYMB_2 ListCheckingConditionRule _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.ListCheckingConditionRule p_3 = (grammar.Absyn.ListCheckingConditionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.TurnOffConditions(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= _SYMB_30 _SYMB_0 AutomataInitRule ListAutomataTransitionRule AutomataAcceptingsRule _SYMB_1 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.AutomataInitRule p_3 = (grammar.Absyn.AutomataInitRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListAutomataTransitionRule p_4 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.AutomataAcceptingsRule p_5 = (grammar.Absyn.AutomataAcceptingsRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.ValidConfiguration(p_3,p_4,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= _SYMB_15 _SYMB_25 _SYMB_2 ListImpossiblePairRule _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.ListImpossiblePairRule p_4 = (grammar.Absyn.ListImpossiblePairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.ImpossiblePairs(p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= _SYMB_23 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.FiniteOutput(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= _SYMB_13 _SYMB_2 ListSymInstance _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.ListSymInstance p_3 = (grammar.Absyn.ListSymInstance)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.SymmetryInstances(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= _SYMB_14 _SYMB_2 ListSymmetryPairRule _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		grammar.Absyn.ListSymmetryPairRule p_3 = (grammar.Absyn.ListSymmetryPairRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.SymmetryPairs(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= _SYMB_28 _SYMB_2 _INTEGER_ _SYMB_6 _INTEGER_ _SYMB_3 
            {
              grammar.Absyn.Statement RESULT = null;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Integer p_5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.NumberOfStatesGuess(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AcceptingRule ::= _SYMB_10 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.AcceptingRule RESULT = null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.TransducerAccepting(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*AcceptingRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TransitionRule ::= _SYMB_20 _SYMB_2 ListName 
            {
              grammar.Absyn.TransitionRule RESULT = null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.LoopingTransition(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*TransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TransitionRule ::= Name _SYMB_4 Name 
            {
              grammar.Absyn.TransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.EmptyTransition(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*TransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TransitionRule ::= Name _SYMB_4 Name Name _SYMB_5 Name 
            {
              grammar.Absyn.TransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.Name p_4 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_6 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.FulTransition(p_1,p_3,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*TransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InitRule ::= _SYMB_16 _SYMB_2 Name _SYMB_3 
            {
              grammar.Absyn.InitRule RESULT = null;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.TransducerInitialState(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*InitRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TransducerRule ::= _SYMB_29 _SYMB_0 InitRule ListTransitionRule AcceptingRule _SYMB_1 
            {
              grammar.Absyn.TransducerRule RESULT = null;
		grammar.Absyn.InitRule p_3 = (grammar.Absyn.InitRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListTransitionRule p_4 = (grammar.Absyn.ListTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.AcceptingRule p_5 = (grammar.Absyn.AcceptingRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Transducer(p_3,p_4,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TransducerRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ModelRule ::= _SYMB_21 _SYMB_0 TransducerRule ListStatement _SYMB_1 
            {
              grammar.Absyn.ModelRule RESULT = null;
		grammar.Absyn.TransducerRule p_3 = (grammar.Absyn.TransducerRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListStatement p_4 = (grammar.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Model(p_3,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*ModelRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ModelRule EOF 
            {
              Object RESULT = null;
		grammar.Absyn.ModelRule start_val = (grammar.Absyn.ModelRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

